#!/usr/bin/perl -w
###############################################################################
# serialcompat - Test Java for serialized binary compatibility.
# Copyright (C) 2002  C. Brian Jones <cbj@gnu.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
# A link to the GNU General Public License is available at the
# japitools homepage, http://stuart.wuffies.net/japi/
###############################################################################

# Recent changes:

# Requirements
use strict;
use Digest::MD5;
use Getopt::Std;

## GLOBAL VARIABLES ##
my %opts = ();
use vars qw (%opts);


# Function prototypes
#sub compare_japis($$);

## MAIN LOOP ##

# Parse cmdline and give a usage message.
getopts("q", \%opts);
my $dot = "." unless $opts{"q"};
my ($origdir, $newdir) = @ARGV;
if (!defined $newdir) {
  print "Usage: serialcompat [-q] <original dir> <to check dir>\n";
  exit 1;
}

# Loop through the two files and compare them.
compare_binary($origdir, $newdir);

## SUBROUTINES ##
sub compare_binary
{
  my ($origdir, $newdir) = @_;
  my ($file) =  "";
  
  opendir (DIR, $newdir) || die "cannot opendir $newdir: $!";
  my @files = grep ( !/^\..*$/, readdir (DIR)); 
  closedir (DIR);

  foreach $file (@files)
  {
    if (-d "$newdir/$file" && -d "$origdir/$file")
    {
      compare_binary ("$origdir/$file", "$newdir/$file");
    }
    elsif (-f "$newdir/$file" && -f "$origdir/$file" && ($file =~ /\.ser$/))
    {
      my $origdigest = md5digest ("$origdir/$file");
      my $newdigest = md5digest ("$newdir/$file");
      if ($origdigest ne $newdigest)
      {
        print $newdir, "/", $file, "\n";
      }
    }
  }
}

sub md5digest 
{
  my ($file) = @_;

  open (FILE, "$file") || die "could not open $file: $!";
  binmode (FILE);
  my $md5 = Digest::MD5->new;
  $md5->addfile(*FILE);
  my $digest = $md5->hexdigest;
  close (FILE);
  return $digest;
}
